/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.AdministrativeRole;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import model.Animal.Animal;
import model.EcoSystem.EcoSystem;
import model.Enterprise.AnimalShelterEnterprise;
import model.Enterprise.Enterprise;
import model.Network.Network;
import model.WorkQueue.AdoptionRequest;
import model.WorkQueue.AnimalManagerRequest;
import model.WorkQueue.MedCareRequest;
import model.WorkQueue.VolunteerRequest;
import model.WorkQueue.WorkRequest;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;

/**
 *
 * @author Jiale Lyu
 */
public class SysAdminDashboardJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    EcoSystem ecoSystem;
    JFreeChart barChart;

    /**
     * Creates new form ManageOrganizationJPanel
     */
    public SysAdminDashboardJPanel(JPanel userProcessContainer, EcoSystem ecosystem, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecosystem;

        populateOurServices();
        populateAdoption();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jPanel_adoption = new javax.swing.JPanel();
        jPanel_ourService = new javax.swing.JPanel();

        setBackground(new java.awt.Color(155, 209, 249));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBack.setBackground(new java.awt.Color(245, 245, 255));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icon_dashboard.png"))); // NOI18N
        lblTitle.setText("Dashboard");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 70, -1, -1));

        jPanel_adoption.setBackground(new java.awt.Color(155, 209, 249));
        jPanel_adoption.setLayout(new java.awt.BorderLayout());
        add(jPanel_adoption, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 140, 400, 300));

        jPanel_ourService.setBackground(new java.awt.Color(155, 209, 249));
        jPanel_ourService.setLayout(new java.awt.BorderLayout());
        add(jPanel_ourService, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 400, 300));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JPanel jPanel_adoption;
    private javax.swing.JPanel jPanel_ourService;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables

    private void populateOurServices() {
        ArrayList<AdoptionRequest> adoptionRequests = new ArrayList<>();
        ArrayList<MedCareRequest> medCareRequests = new ArrayList<>();
        ArrayList<VolunteerRequest> volunteerRequests = new ArrayList<>();
        ArrayList<AnimalManagerRequest> animalManagerRequests = new ArrayList<>();
//use hashmap to store services name and value
        Map<String, Integer> workReqMap = new HashMap<>();
        for (Network nw : ecoSystem.getNetworkList()) {
            for (WorkRequest workQRequest : nw.getWorkQueue().getWorkRequestList()) {

                if (workQRequest instanceof AdoptionRequest) {
                    adoptionRequests.add((AdoptionRequest) workQRequest);
                } else if (workQRequest instanceof MedCareRequest) {
                    medCareRequests.add((MedCareRequest) workQRequest);
                } else if (workQRequest instanceof VolunteerRequest) {
                    volunteerRequests.add((VolunteerRequest) workQRequest);
                }
            }
        }
        for (Network nw : ecoSystem.getNetworkList()) {
            for (Enterprise e : nw.getEnterpriseDirectory().getEnterpriseList()) {
                for (WorkRequest wr : e.getWorkQueue().getWorkRequestList()) {
                    if (wr instanceof AnimalManagerRequest) {
                        animalManagerRequests.add((AnimalManagerRequest) wr);
                    }
                }
            }
            //  network> Enterprise > = animal shelter > request = amreq
        }
//store service data
        workReqMap.put("Adoption Services", adoptionRequests.size());
        workReqMap.put("Medical Care Services", medCareRequests.size());
        workReqMap.put("Volunteer Services", volunteerRequests.size());
        workReqMap.put("Animal Shelter Services", animalManagerRequests.size());
//create chart
        barChart = ChartFactory.createPieChart("Our Service", createDataset(workReqMap), true, true, false);

        ChartPanel chartPanel = new ChartPanel(barChart);
        jPanel_ourService.removeAll();
        jPanel_ourService.add(chartPanel, BorderLayout.CENTER);
        jPanel_ourService.validate();
    }

    private PieDataset createDataset(Map<String, Integer> workReqMap) {
        final DefaultPieDataset dataset = new DefaultPieDataset();
        for (String r : workReqMap.keySet()) {
            dataset.setValue(r, workReqMap.get(r));
        }
        return dataset;
    }

    private void populateAdoption() {
        ArrayList<Animal> adopted = new ArrayList<>();
        ArrayList<Animal> notadopted = new ArrayList<>();
//        ArrayList<MedCareRequest> medCareRequests = new ArrayList<>();
//        ArrayList<VolunteerRequest> volunteerRequests = new ArrayList<>();
//        ArrayList<AnimalManagerRequest> animalManagerRequests = new ArrayList<>();

//add adopiton data
        Map<String, Integer> workReqMap = new HashMap<>();
        for (Network nw : ecoSystem.getNetworkList()) {
            for (Enterprise e : nw.getEnterpriseDirectory().getEnterpriseList()) {
                if (e instanceof AnimalShelterEnterprise) {
                    for (Animal a : ((AnimalShelterEnterprise) e).getAnimalDirectory().getAnimalList()) {
                        if (a.getAdoptor() != null) {
                            adopted.add(a);
                        }
                        notadopted.add(a);
                    }
                }

            }

        }
//store data
        workReqMap.put("Adopted", adopted.size());
        workReqMap.put("Not adopted", notadopted.size());

        barChart = ChartFactory.createPieChart("Animal Adoption Rate", createDataset(workReqMap), true, true, false);

        ChartPanel chartPanel = new ChartPanel(barChart);
        jPanel_adoption.removeAll();
        jPanel_adoption.add(chartPanel, BorderLayout.CENTER);
        jPanel_adoption.validate();

    }

}
